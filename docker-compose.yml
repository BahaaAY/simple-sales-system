volumes:
  kafka_data:
  client_db_data:
  product_db_data:
  sales_db_data:

networks:
  backend:

services:
  # ───────────────────────────── Kafka stack ─────────────────────────────
  kafka:
    image: bitnami/kafka:3.6
    container_name: sales-system-kafka
    ports:
      - "9092:9092"          # host → external listener
    environment:
      # — KRaft single‑node basics —
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_KRAFT_CLUSTER_ID: "XqZrTh1yT8qXwjsn1a6L9A"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"

      # — Listeners —
      KAFKA_CFG_LISTENERS: "INTERNAL://0.0.0.0:9094,EXTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "INTERNAL://kafka:9094,EXTERNAL://localhost:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "INTERNAL"

      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - backend

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: sales-system-schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:9094"
    networks:
      - backend

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: sales-system-kafka-ui
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "dev"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9094"
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: "http://schema-registry:8081"
      AUTH_TYPE: "DISABLED"
    networks:
      - backend

  # ───────────────────────────── Databases ─────────────────────────────
  client-db:
    image: postgres:16
    container_name: client-db
    environment:
      POSTGRES_DB: client_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: BahaaAY123
    volumes:
      - client_db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - backend

  product-db:
    image: postgres:16
    container_name: product-db
    environment:
      POSTGRES_DB: product_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: BahaaAY123
    volumes:
      - product_db_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - backend

  sales-db:
    image: postgres:16
    container_name: sales-db
    environment:
      POSTGRES_DB: sales_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: BahaaAY123
    volumes:
      - sales_db_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - backend

  # ───────────────────────────── Spring‑Boot apps ─────────────────────────────
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    depends_on:
      - product-service
      - client-service
      - sales-service
    ports:
      - "8180:8180"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8180
      # Point the gateway to service names inside the network
      PRODUCT_SERVICE_URI: http://product-service:8181
      CLIENT_SERVICE_URI: http://client-service:8182
      SALES_SERVICE_URI:  http://sales-service:8183
    networks:
      - backend

  client-service:
    build:
      context: .
      dockerfile: client-service/Dockerfile
    container_name: client-service
    depends_on:
      - client-db
      - kafka
      - schema-registry
    ports:
      - "8182:8182"
    environment:
      SERVER_PORT: 8182
      SPRING_DATASOURCE_URL: jdbc:postgresql://client-db:5432/client_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: BahaaAY123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9094
      SPRING_KAFKA_PROPERTIES_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    networks:
      - backend

  product-service:
    build:
      context: .
      dockerfile: product-service/Dockerfile
    container_name: product-service
    depends_on:
      - product-db
      - kafka
      - schema-registry
    ports:
      - "8181:8181"
    environment:
      SERVER_PORT: 8181
      SPRING_DATASOURCE_URL: jdbc:postgresql://product-db:5432/product_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: BahaaAY123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9094
      SPRING_KAFKA_PROPERTIES_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    networks:
      - backend

  sales-service:
    build:
      context: .
      dockerfile: sales-service/Dockerfile
    container_name: sales-service
    depends_on:
      - sales-db
      - kafka
      - schema-registry
    ports:
      - "8183:8183"
    environment:
      SERVER_PORT: 8183
      SPRING_DATASOURCE_URL: jdbc:postgresql://sales-db:5432/sales_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: BahaaAY123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9094
      SPRING_KAFKA_PROPERTIES_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    networks:
      - backend
