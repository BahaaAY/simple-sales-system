server:
  port: ${SERVER_PORT:8083}

spring:
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: org.postgresql.Driver
  kafka:
    topics:
      products: product-events.v1
      clients: client-events.v1
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.UUIDSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema.registry.url: ${SPRING_KAFKA_PROPERTIES_SCHEMA_REGISTRY_URL}
        auto.register.schemas: true
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.UUIDDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: ${SPRING_KAFKA_PROPERTIES_SCHEMA_REGISTRY_URL:http://localhost:8081}
        specific.avro.reader: true
        auto-offset-reset: earliest
        enable-auto-commit: false # weâ€™ll commit manually
    listener:
      ack-mode: manual
      concurrency: 1
    groups:
        products: sales-service-product-consumer
        clients: sales-service-client-consumer
  jpa:
    hibernate:
      ddl-auto: none #using Liquibase for schema management
    properties:
      hibernate:
        default_schema: sales_service
        format_sql: true
        show_sql: true

  liquibase:
    enabled: true
    change-log: classpath:/db/changelog/changelog-master.yml
    default-schema: sales_service